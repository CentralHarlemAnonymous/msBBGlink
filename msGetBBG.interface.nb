(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 10.4' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[      7162,        182]
NotebookOptionsPosition[      6845,        166]
NotebookOutlinePosition[      7193,        181]
CellTagsIndexPosition[      7150,        178]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["msGetBBG wrapper", "Title",
 CellChangeTimes->{{3.6661149246850777`*^9, 3.6661149283396516`*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "msGetBBGMakeLinkObject", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{"\"\<path to executable\>\"", "\[Rule]", 
     RowBox[{"FileNameJoin", "[", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"HomeDirectory", "[", "]"}], ",", "\"\<Box Sync\>\"", ",", 
        "\"\<programming\>\"", ",", "\"\<visual studio\>\"", ",", 
        "\"\<msGetBBG visual 0.3\>\"", ",", "\"\<msGetBBG\>\"", ",", 
        "\"\<Debug\>\"", ",", "\"\<msGetBBG.exe\>\""}], "}"}], "]"}]}], 
    "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"msGetBBGMakeLinkObject", "[", 
     RowBox[{"OptionsPattern", "[", "]"}], "]"}], ":=", 
    RowBox[{"Install", "[", 
     RowBox[{"OptionValue", "[", "\"\<path to executable\>\"", "]"}], "]"}]}],
    ";", 
   RowBox[{
    RowBox[{"msGetBBGMakeLinkObject", "::", "usage"}], " ", "=", " ", 
    "\"\<msGetBBGMakeLinkObject[]: When run, launches the WSTP application \
that moves current data from Bloomberg to Mathematica. msGetBB[] will launch \
and kill this automatically, but you can do it manually with this function, \
assign the result to a variable, and pass the link to msGetBB[] with the \
\\\"LinkObject]\\\"\[Rule] option if you plan on calling it many times in \
succession.  This saves the overhead of relaunching the link for every call. \
When finished, can call Uninstall[(this link)] and the program will be quit. \
Can set \\\"path to executable\\\" variable if the default is for some reason \
not what you want.\>\""}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "msGetBB", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"\"\<noisy\>\"", "\[Rule]", "False"}], ",", 
     RowBox[{"\"\<LinkObject\>\"", "\[Rule]", "Null"}], ",", 
     RowBox[{"\"\<path to executable\>\"", "\[Rule]", 
      RowBox[{"FileNameJoin", "[", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"HomeDirectory", "[", "]"}], ",", "\"\<Box Sync\>\"", ",", 
         "\"\<programming\>\"", ",", "\"\<visual studio\>\"", ",", 
         "\"\<msGetBBG visual 0.3\>\"", ",", "\"\<msGetBBG\>\"", ",", 
         "\"\<Debug\>\"", ",", "\"\<msGetBBG.exe\>\""}], "}"}], "]"}]}]}], 
    "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"msGetBB", "[", 
    RowBox[{"ticker_String", ",", "field_String", ",", 
     RowBox[{"OptionsPattern", "[", "]"}]}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"raw", ",", "exp", ",", "link"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"link", " ", "=", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Head", "[", 
           RowBox[{"OptionValue", "[", "\"\<LinkObject\>\"", "]"}], "]"}], "===",
           "LinkObject"}], ",", 
         RowBox[{"OptionValue", "[", "\"\<LinkObject\>\"", "]"}], ",", 
         "\[IndentingNewLine]", " ", 
         RowBox[{"Install", "[", 
          RowBox[{"OptionValue", "[", "\"\<path to executable\>\"", "]"}], 
          "]"}]}], "]"}]}], ";", " ", 
      RowBox[{"(*", " ", 
       RowBox[{"set", " ", "up", " ", "link", " ", "to", " ", 
        RowBox[{"C", "++"}], " ", "Code", " ", "if", " ", "needed"}], " ", 
       "*)"}], "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"OptionValue", "[", "\"\<noisy\>\"", "]"}], ",", 
          RowBox[{"Print", "[", 
           RowBox[{"\"\<link: \>\"", ",", "link"}], "]"}]}], "]"}], ";"}], 
       "*)"}], "\[IndentingNewLine]", 
      RowBox[{"raw", "=", 
       RowBox[{"msGetBBG", "[", 
        RowBox[{"ticker", ",", "field", ",", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"OptionValue", "[", "\"\<noisy\>\"", "]"}], ",", "1", ",", 
           "0"}], "]"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"OptionValue", "[", "\"\<noisy\>\"", "]"}], ",", 
          RowBox[{"Print", "[", 
           RowBox[{"\"\<raw: \>\"", ",", "raw"}], "]"}]}], "]"}], ";"}], 
       "*)"}], "\[IndentingNewLine]", 
      RowBox[{"exp", "=", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"!", 
          RowBox[{"OptionValue", "[", "\"\<noisy\>\"", "]"}]}], ",", 
         RowBox[{"ToExpression", "[", 
          RowBox[{"StringTrim", "[", "raw", "]"}], "]"}], ",", 
         RowBox[{"StringTrim", "[", "raw", "]"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Head", "[", 
          RowBox[{"OptionValue", "[", "\"\<LinkObject\>\"", "]"}], "]"}], "===",
          "LinkObject"}], ",", "False", ",", 
        RowBox[{"Uninstall", "[", "link", "]"}]}], "]"}], ";", " ", 
      RowBox[{"(*", " ", 
       RowBox[{"close", " ", "link", " ", "if", " ", "needed"}], " ", "*)"}], 
      " ", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Head", "[", "exp", "]"}], "===", "String"}], ",", "raw", 
        ",", "exp"}], "]"}]}]}], "\[IndentingNewLine]", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"msGetBB", "::", "usage"}], " ", "=", " ", 
   "\"\<msGetBB[ticker_String,field_String,OptionsPattern[]]. Connects to \
Bloomberg and downloads a single field's data for a single security. Fields \
that return multiple lines (like dividend history or current holders) will be \
delivered as Lists of Associations. The user may wish to wrap each of these \
in a Dataset.\n\nIf you plan on running msGetBB[] many times in close \
succession, run msGetBBGMakeLinkObject[] first and save the resulting \
LinkObject to a variable. You can then pass that LinkObject to msGetBB[] with \
the \\\"LinkObject\\\"\[Rule] option, and Uninstall[] it when you are done. \n\
\nCan set \\\"path to executable\\\" variable if the default is for some \
reason not what you want.\n\\\"noisy\\\"\[Rule]True will try to return \
debugging information.\>\""}], ";"}]}], "Input"]
}, Open  ]]
},
WindowSize->{1350, 1003},
WindowMargins->{{Automatic, 52}, {17, Automatic}},
FrontEndVersion->"10.4 for Microsoft Windows (64-bit) (February 25, 2016)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 103, 1, 101, "Title"],
Cell[686, 25, 6143, 138, 692, "Input"]
}, Open  ]]
}
]
*)

(* End of internal cache information *)

